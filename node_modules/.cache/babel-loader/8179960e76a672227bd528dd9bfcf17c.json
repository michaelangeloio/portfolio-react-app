{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { HttpResponse } from '@aws-sdk/protocol-http';\nimport { buildQueryString } from '@aws-sdk/querystring-builder';\nimport axios from 'axios';\nimport { ConsoleLogger as Logger, Platform } from '@aws-amplify/core';\nvar logger = new Logger('axios-http-handler');\nexport var SEND_PROGRESS_EVENT = 'sendProgress';\n\nfunction isBlob(body) {\n  return typeof Blob !== 'undefined' && body instanceof Blob;\n}\n\nvar normalizeHeaders = function normalizeHeaders(headers, normalizedName) {\n  var e_1, _a;\n\n  try {\n    for (var _b = __values(Object.entries(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var _d = __read(_c.value, 2),\n          k = _d[0],\n          v = _d[1];\n\n      if (k !== normalizedName && k.toUpperCase() === normalizedName.toUpperCase()) {\n        headers[normalizedName] = v;\n        delete headers[k];\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n};\n\nexport var reactNativeRequestTransformer = [function (data, headers) {\n  if (isBlob(data)) {\n    normalizeHeaders(headers, 'Content-Type');\n    normalizeHeaders(headers, 'Accept');\n    return data;\n  } // Axios' default transformRequest is an array\n\n\n  return axios.defaults.transformRequest[0].call(null, data, headers);\n}];\n\nvar AxiosHttpHandler =\n/** @class */\nfunction () {\n  function AxiosHttpHandler(httpOptions, emitter, cancelTokenSource) {\n    if (httpOptions === void 0) {\n      httpOptions = {};\n    }\n\n    this.httpOptions = httpOptions;\n    this.emitter = emitter;\n    this.cancelTokenSource = cancelTokenSource;\n  }\n\n  AxiosHttpHandler.prototype.destroy = function () {// Do nothing. TLS and HTTP/2 connection pooling is handled by the\n    // browser.\n  };\n\n  AxiosHttpHandler.prototype.handle = function (request, options) {\n    var requestTimeoutInMs = this.httpOptions.requestTimeout;\n    var emitter = this.emitter;\n    var path = request.path;\n\n    if (request.query) {\n      var queryString = buildQueryString(request.query);\n\n      if (queryString) {\n        path += \"?\" + queryString;\n      }\n    }\n\n    var port = request.port;\n    var url = request.protocol + \"//\" + request.hostname + (port ? \":\" + port : '') + path;\n    var axiosRequest = {};\n    axiosRequest.url = url;\n    axiosRequest.method = request.method;\n    axiosRequest.headers = request.headers; // The host header is automatically added by the browser and adding it explicitly in the\n    // axios request throws an error https://github.com/aws-amplify/amplify-js/issues/5376\n    // This is because the host header is a forbidden header for the http client to set\n    // see https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name and\n    // https://fetch.spec.whatwg.org/#forbidden-header-name\n    // The reason we are removing this header here instead of in the aws-sdk's client\n    // middleware is that the host header is required to be in the request signature and if\n    // we remove it from the middlewares, then the request fails because the header is added\n    // by the browser but is absent from the signature.\n\n    delete axiosRequest.headers['host'];\n\n    if (request.body) {\n      axiosRequest.data = request.body;\n    } else {\n      // Fix for https://github.com/aws-amplify/amplify-js/issues/5432\n      // If the POST request body is empty but content-type header is set, axios is forcibly removing it\n      // See https://github.com/axios/axios/issues/1535 and refusing to fix it https://github.com/axios/axios/issues/755\n      // This change is a workaround to set the data as null (instead of undefined) to prevent axios from\n      // removing the content-type header. Link for the source code\n      // https://github.com/axios/axios/blob/dc4bc49673943e35280e5df831f5c3d0347a9393/lib/adapters/xhr.js#L121-L123\n      if (axiosRequest.headers['Content-Type']) {\n        axiosRequest.data = null;\n      }\n    }\n\n    if (emitter) {\n      axiosRequest.onUploadProgress = function (event) {\n        emitter.emit(SEND_PROGRESS_EVENT, event);\n        logger.debug(event);\n      };\n    } // If a cancel token source is passed down from the provider, allows cancellation of in-flight requests\n\n\n    if (this.cancelTokenSource) {\n      axiosRequest.cancelToken = this.cancelTokenSource.token;\n    } // From gamma release, aws-sdk now expects all response type to be of blob or streams\n\n\n    axiosRequest.responseType = 'blob'; // In Axios, Blobs are identified by calling Object.prototype.toString on the object. However, on React Native,\n    // calling Object.prototype.toString on a Blob returns '[object Object]' instead of '[object Blob]', which causes \n    // Axios to treat Blobs as generic Javascript objects. Therefore we need a to use a custom request transformer\n    // to correctly handle Blob in React Native.\n\n    if (Platform.isReactNative) {\n      axiosRequest.transformRequest = reactNativeRequestTransformer;\n    }\n\n    var raceOfPromises = [axios.request(axiosRequest).then(function (response) {\n      return {\n        response: new HttpResponse({\n          headers: response.headers,\n          statusCode: response.status,\n          body: response.data\n        })\n      };\n    }).catch(function (error) {\n      // Error\n      logger.error(error.message);\n      throw error;\n    }), requestTimeout(requestTimeoutInMs)];\n    return Promise.race(raceOfPromises);\n  };\n\n  return AxiosHttpHandler;\n}();\n\nexport { AxiosHttpHandler };\n\nfunction requestTimeout(timeoutInMs) {\n  if (timeoutInMs === void 0) {\n    timeoutInMs = 0;\n  }\n\n  return new Promise(function (resolve, reject) {\n    if (timeoutInMs) {\n      setTimeout(function () {\n        var timeoutError = new Error(\"Request did not complete within \" + timeoutInMs + \" ms\");\n        timeoutError.name = 'TimeoutError';\n        reject(timeoutError);\n      }, timeoutInMs);\n    }\n  });\n}","map":{"version":3,"sources":["../../src/providers/axios-http-handler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { HttpResponse } from '@aws-sdk/protocol-http';\nimport { buildQueryString } from '@aws-sdk/querystring-builder';\nimport axios from 'axios';\nimport { ConsoleLogger as Logger, Platform } from '@aws-amplify/core';\nvar logger = new Logger('axios-http-handler');\nexport var SEND_PROGRESS_EVENT = 'sendProgress';\nfunction isBlob(body) {\n    return typeof Blob !== 'undefined' && body instanceof Blob;\n}\nvar normalizeHeaders = function (headers, normalizedName) {\n    var e_1, _a;\n    try {\n        for (var _b = __values(Object.entries(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var _d = __read(_c.value, 2), k = _d[0], v = _d[1];\n            if (k !== normalizedName &&\n                k.toUpperCase() === normalizedName.toUpperCase()) {\n                headers[normalizedName] = v;\n                delete headers[k];\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n};\nexport var reactNativeRequestTransformer = [\n    function (data, headers) {\n        if (isBlob(data)) {\n            normalizeHeaders(headers, 'Content-Type');\n            normalizeHeaders(headers, 'Accept');\n            return data;\n        }\n        // Axios' default transformRequest is an array\n        return axios.defaults.transformRequest[0].call(null, data, headers);\n    },\n];\nvar AxiosHttpHandler = /** @class */ (function () {\n    function AxiosHttpHandler(httpOptions, emitter, cancelTokenSource) {\n        if (httpOptions === void 0) { httpOptions = {}; }\n        this.httpOptions = httpOptions;\n        this.emitter = emitter;\n        this.cancelTokenSource = cancelTokenSource;\n    }\n    AxiosHttpHandler.prototype.destroy = function () {\n        // Do nothing. TLS and HTTP/2 connection pooling is handled by the\n        // browser.\n    };\n    AxiosHttpHandler.prototype.handle = function (request, options) {\n        var requestTimeoutInMs = this.httpOptions.requestTimeout;\n        var emitter = this.emitter;\n        var path = request.path;\n        if (request.query) {\n            var queryString = buildQueryString(request.query);\n            if (queryString) {\n                path += \"?\" + queryString;\n            }\n        }\n        var port = request.port;\n        var url = request.protocol + \"//\" + request.hostname + (port ? \":\" + port : '') + path;\n        var axiosRequest = {};\n        axiosRequest.url = url;\n        axiosRequest.method = request.method;\n        axiosRequest.headers = request.headers;\n        // The host header is automatically added by the browser and adding it explicitly in the\n        // axios request throws an error https://github.com/aws-amplify/amplify-js/issues/5376\n        // This is because the host header is a forbidden header for the http client to set\n        // see https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name and\n        // https://fetch.spec.whatwg.org/#forbidden-header-name\n        // The reason we are removing this header here instead of in the aws-sdk's client\n        // middleware is that the host header is required to be in the request signature and if\n        // we remove it from the middlewares, then the request fails because the header is added\n        // by the browser but is absent from the signature.\n        delete axiosRequest.headers['host'];\n        if (request.body) {\n            axiosRequest.data = request.body;\n        }\n        else {\n            // Fix for https://github.com/aws-amplify/amplify-js/issues/5432\n            // If the POST request body is empty but content-type header is set, axios is forcibly removing it\n            // See https://github.com/axios/axios/issues/1535 and refusing to fix it https://github.com/axios/axios/issues/755\n            // This change is a workaround to set the data as null (instead of undefined) to prevent axios from\n            // removing the content-type header. Link for the source code\n            // https://github.com/axios/axios/blob/dc4bc49673943e35280e5df831f5c3d0347a9393/lib/adapters/xhr.js#L121-L123\n            if (axiosRequest.headers['Content-Type']) {\n                axiosRequest.data = null;\n            }\n        }\n        if (emitter) {\n            axiosRequest.onUploadProgress = function (event) {\n                emitter.emit(SEND_PROGRESS_EVENT, event);\n                logger.debug(event);\n            };\n        }\n        // If a cancel token source is passed down from the provider, allows cancellation of in-flight requests\n        if (this.cancelTokenSource) {\n            axiosRequest.cancelToken = this.cancelTokenSource.token;\n        }\n        // From gamma release, aws-sdk now expects all response type to be of blob or streams\n        axiosRequest.responseType = 'blob';\n        // In Axios, Blobs are identified by calling Object.prototype.toString on the object. However, on React Native,\n        // calling Object.prototype.toString on a Blob returns '[object Object]' instead of '[object Blob]', which causes \n        // Axios to treat Blobs as generic Javascript objects. Therefore we need a to use a custom request transformer\n        // to correctly handle Blob in React Native.\n        if (Platform.isReactNative) {\n            axiosRequest.transformRequest = reactNativeRequestTransformer;\n        }\n        var raceOfPromises = [\n            axios\n                .request(axiosRequest)\n                .then(function (response) {\n                return {\n                    response: new HttpResponse({\n                        headers: response.headers,\n                        statusCode: response.status,\n                        body: response.data,\n                    }),\n                };\n            })\n                .catch(function (error) {\n                // Error\n                logger.error(error.message);\n                throw error;\n            }),\n            requestTimeout(requestTimeoutInMs),\n        ];\n        return Promise.race(raceOfPromises);\n    };\n    return AxiosHttpHandler;\n}());\nexport { AxiosHttpHandler };\nfunction requestTimeout(timeoutInMs) {\n    if (timeoutInMs === void 0) { timeoutInMs = 0; }\n    return new Promise(function (resolve, reject) {\n        if (timeoutInMs) {\n            setTimeout(function () {\n                var timeoutError = new Error(\"Request did not complete within \" + timeoutInMs + \" ms\");\n                timeoutError.name = 'TimeoutError';\n                reject(timeoutError);\n            }, timeoutInMs);\n        }\n    });\n}\n//# sourceMappingURL=axios-http-handler.js.map"]},"metadata":{},"sourceType":"module"}